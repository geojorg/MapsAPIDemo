// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MapsAPIDemo.Models;
//
//    var searchResultModel = SearchResultModel.FromJson(jsonString);

namespace MapsAPIDemo.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SearchResultModel
    {
        [JsonProperty("candidates")]
        public Candidate[] Candidates { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public partial class Candidate
    {
        [JsonProperty("formatted_address")]
        public string FormattedAddress { get; set; }

        [JsonProperty("geometry")]
        public Geometry Geometry { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Geometry
    {
        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("viewport")]
        public Viewport Viewport { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lng")]
        public double Lng { get; set; }
    }

    public partial class Viewport
    {
        [JsonProperty("northeast")]
        public Location Northeast { get; set; }

        [JsonProperty("southwest")]
        public Location Southwest { get; set; }
    }

    public partial class SearchResultModel
    {
        public static SearchResultModel FromJson(string json) => JsonConvert.DeserializeObject<SearchResultModel>(json, MapsAPIDemo.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SearchResultModel self) => JsonConvert.SerializeObject(self, MapsAPIDemo.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}